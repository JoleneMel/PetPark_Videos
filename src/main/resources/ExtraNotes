
Week 13 (plus my own thoughts added to it)
-Spring Boot is a Java development framework, that will make programming a lot easier by automating common repetitive processes. 

	-In week 12 we will learn about sring boot by developing REST APIS 
			-REST: A set of constraints to build compatible applications. 
			
			-API: A set of end points (URLS) that perform actions or return data 
			
			//NOTES ABOUT MAPPING IN GENERAL  :) 
			(Note mapping will be used to create the end points, starting with requestmapping, and then anything after that will be 
			after requestmapping. 
			
			Example if your RequestMapping("/pet_park") and your PostMapping("/pet_park") your Post URL will be not 
			http://localhost:8080/pet_park
			but 
			http://localhost:8080/pet_park/pet_park/
			
			BUT if your RequestMapping("/pet_park") and your PostMapping() your Post URL will be
			http://localhost:8080/pet_park
			
			With every additional POST, GET, PUT, OR DELETE MAPPING the endpoints have to not match (so no 2 post mapping can have the same end points)
			(or delete, get, puts, if you have more than 1 of them you will need to ensure the endpoint can be identifiable for the program to define 
			which are you referring to) 
			
	Material for the upcoming weeks~
		2 Rest APIS 
			1. (Current project) Pet Park Locations API, over weeks 13 and 14 (or week 1 and 2) 
				-1b. Assignment/homework is a Pet Sore API (weeks 1-3)
				
			2. Dog Rescur API over weeks 15 and week 16 (or week 3-4) 
			
	
	Weeks Content 
		-Each API will cover the following: 
			How to create a Spring Boot project 
			Use Spring JPA (Java Persistence API) to create tables and perform CRUD operations (Create, Read, Update and Delete)
				
				HttpMapping and meanings within CRUD 
				Create = PostMapping
				Read = GetMapping
				Update = PutMapping
				Delete = DeleteMapping. 
				
			How to create one-to many and many-to-many relationships with JPA 
			
			How to work with Springs Dependency Injection Framework 
			
	Additional Content aka Breakout Videos 
		-Extra videos that go into depth on central Spring Boot topics 
		
			-Examples 
				-Spring vs. Spring Boot 
				-Spring JPA vs Spring JDBC
				-JPA Relationships 
				-Dependency Injection
				-etc.
	
	Week 1 for Pet Park Locations
		-Creating the maven project 
		-Creating the database schema
		-Creating table data 
		-Create JPA configutation 
		-Program the "Create Contributor" operation. 
		
		-Maven is a project build tool 
		-We will be using it for dependency management 
		
		How to create a Spring Boot Project
		-Go to start.spring.io
		-Build a pom file w/ latest SpringBoot(to get repos use 3.0.8-SNAPSHOT)
		-Copy and paste it into the maven project 
		
	Packages 
		-these can have dots/periods like pet.park
		-Create the main application file
			-Annotated by @SpringBootApplication and the run method 
			
	Maven Project 
		-Select simple project
		-GroupId is typically a web address example com.promineotech 
		-ArtifactId this is the name of the projects in this project pet_parks
		-The GroupId, ArtifactId and Version are how our application uniquely identifies our project. 
		-This is called Gav 
		
	application.yaml file notes 
		-make in src/main/resources 
		-yaml it is hierarchical and it's just a superset of Json so it's like Json that allows comments
		-if you start programming the yaml file without the editor then install it it will cause silly errors 
		-username and password match mysql stuff 
		-3306 is the mysql port 
		
		
	-RD Notes JPA CONFIG
we will in this video add jpa and spring boot configuration into application.yaml and then we'll start the application and
show that the tables have been created by jpa and populated by Spring boot we'll do this in application.yaml by
adding three new configuration sections spring.data source which will have the database connection
information and we already added that I believe we'll in this time we'll add spring.jpa
and spring.sql so spring.jpa contains jpa setup instructions and spring.sql contains spring data
instructions then we'll use D Beaver to verify that the tables have been created and
populated and the rules are very simple we use MySQL workbench to create the schema the
user and the password to give privileges to the user and then we use D Beaver for
everything else queries inserts Etc and we'll give you the dbiver installation
instructions it's pretty simple all right let's get busy and code it here is the project
let me open up application.yaml and you can see that we already have the spring data source configuration
so let's add J spring jpa now to add jpa we can have a blank line in here but we have to
start it in the same column as data source so it's indented two in my editor so I'll just put jpa and a colon
and the jpa engine that spring boot uses is is a library an open source Library called hibernate and so we'll add a
section for hibernate here hibernate is what's called an object relational mapper or orm and that's what
takes your entities and converts them into SQL statements so in hibernate we'll say ddl Dash Auto
this tells hibernate whether or not to create the tables and here we'll set it to
create the first time and we'll put it to update right after this because we don't want it creating
tables every single time otherwise it'll wipe all our data out and then also indented along with
hibernate we have show Dash SQL this is whether or not we want the SQL to be logged
and we'll say true yeah we do and then we're going to put in something sometimes when hibernate's creating the
tables and spring boot is creating the configuration or creating the um inserting into the tables there you can
have a a situation in which spring boot tries to insert Data before the tables have been created which is you know bad
so we'll add an instruction to tell spring boot to wait so defer Dash data source Dash initialization
and we'll set that to true that just says spring boot will wait until jpa is finished before trying to
populate the amenities table and then we'll add another spring.sql configuration again this must line up
with jpa and data source otherwise the yamla won't work so we'll say SQL init and then mode
and this will be always and we'll turn it off by saying never when because we don't want the amenities
to be created each time because first it would be one set of amenities then there'd be another set of the same
amenities and another set of the same amenities and so we'll turn it off once we've actually created it and let's do that now
um while we're doing that I'll startup Dbeaver and get it running I'm going to run
petparkapplication.java right click on that run as Java application and we should see it logging some things
and let me stop the application now that it's initialized and if I scroll down a bit you can see from coming from
hibernate and what's throwing some exceptions saying that the tables don't exist
that's okay then hibernate says drop table if exist create table amenity create so these are
the create table statements um and it creates amenity contributor pet Park Community and pet Park
and then we'll see if those were populated okay so in D beaver I need to create a connection to the pet
parks schema and the way I'll do that is I can do this several different ways I can
right click in the database Navigator create connection so that's one way I'll just do that select this first my sequel
from the SQL tab click next and now you'll see why I named everything the same I can put in
database which is really the schema pet parks with an underscore the username is not root it is
pet parks with an underscore and the password is pet parks with an underscore
I'll test the connection and it says it connected so we'll do okay finish there's my new connection and if
I expand pet parks and expand databases which is a schema expand pet Parks again and expand tables
you'll see that it's got our four tables in there so it's got amenity connect contributor pet Park and pet Park
amenity if I double click on amenity you'll see with the data tab selected the amenities that we added dog friendly
cat friendly Turtle friendly chicken friendly Etc so the amenities are all there so spring jpa created the tables
The Entity from The Entity classes and then from data.sql and Source main resources spring boot
ran executed that the insert statements in that file and we created these table rows so in this video we
added the configuration for jpa and spring Boot and then we ran the application and it created everything